.wrap {
	color: var(--c_font_dark);

	margin: 0 calc(50% - 50vw); // 左右MAX
	margin-top: calc(-1 * $main_marginTop); // ヘッダー分総裁

	--mainWidth: 100vw;
	--mainHeight: 100vh;
	@supports (height: 100svh) {
		--mainHeight: 100svh;
	}
	width: var(--mainWidth);
	height: var(--mainHeight);

	position: relative;
	overflow: hidden;
	.scroll {
		//スクロールエリアを全画面に反映
		position: absolute;
		top: 50%;
		left: 50%;
		transform-origin: center;
		transform: translate(-50%, -50%) rotate(-10deg);
		image-rendering: -webkit-optimize-contrast;
		backface-visibility: hidden;
		--sin10: 0.17364817766693034885171662676931479600037567718407;
		--cos10: 0.98480775301220805936674302458952301367064325171984;
		--tan10: 0.1763269807084649734710903868686189861216330623481;

		--w1: calc(var(--mainHeight) * var(--sin10));
		--w2: calc(var(--mainWidth) * var(--cos10));
		--scrollWidth: calc(var(--w1) + var(--w2));
		width: var(--scrollWidth);

		--h1: calc(var(--mainHeight) * var(--cos10));
		--h2: calc(var(--mainWidth) * var(--sin10));
		height: calc(var(--h1) + var(--h2));

		overflow: hidden;
		overflow-y: scroll;
		display: grid;
		place-items: center;
		.list {
			// 斜めスクロール：表示エリア
			--size: 0.95;
			@media (max-width: 800px) {
				--size: 1;
			}
			--viewWidth: calc(
				var(--scrollWidth) * var(--size) - var(--mainHeight) * var(--sin10) * 2
			);
			width: var(--viewWidth);
			& > * {
				// 上下の余白確保
				--viewPadding: calc(var(--viewWidth) * var(--tan10));
				&:first-child {
					margin-top: calc(var(--viewPadding) + $main_marginTop + 4vw);
				}
				&:last-child {
					margin-bottom: calc(var(--viewPadding) + $main_marginTop);
				}
			}

			// 段組レイアウト
			display: flex;
			flex-flow: column;
			--gap: 1vw;
			gap: var(--gap);
			> li {
				// position: relative;
				cursor: pointer;
				> ul {
					display: flex;
					gap: var(--gap);
					> li {
						--width: calc(
							(var(--viewWidth) - var(--gapCount) * var(--gap)) /
								var(--aspectSum) * var(--aspect)
						);
						width: var(--width);
						height: calc(var(--width) / var(--aspect));
						position: relative;
						.tmb {
							position: absolute;
							top: 0;
							left: 0;
							width: 100%;
							height: 100%;
						}
						.categoryList {
							--fontSize: min(1vw, 1.1rem);
							font-size: var(--fontSize);
						}
						.meta {
							position: absolute;
							top: 0;
							left: 0;
							width: 100%;
							height: 100%;
							padding: 1.5rem;
							background: rgba(#000, 0.5);
							backdrop-filter: blur(2px);
							opacity: 0;
							transition: 0.3s opacity;
							will-change: opacity;
							@include hover {
								opacity: 1;
							}
							.list_title {
								margin-bottom: 0.3rem;
								font-weight: bold;
							}
						}
					}
				}
			}
		}
	}
}
.catList {
	font-size: 1.6rem;
	font-weight: bold;
	position: fixed;
	padding: 3vmin 0;
	bottom: 0;
	left: 0;
	z-index: 99;
	@media (max-width: 800px) {
		bottom: $main_marginTop;
	}
	> li {
		padding: 0.7vmin 5vmin;
		padding-right: 4vmin;
	}
}
.tmb {
	background: var(--c_bg_body);
	position: relative;
	&::after {
		background: rgba(var(--c_bg_body_reversal_rgb), 0.03);
		content: "";
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
	}
}
.categoryList {
	position: absolute;
	right: 0;
	top: 0;
	display: flex;
	flex-wrap: wrap;
	transition: 0.3s transform;
	text-transform: uppercase;
	z-index: 9;
	> li {
		padding: calc(var(--fontSize) / 6) calc(var(--fontSize) / 2.5);
		margin-right: calc(var(--fontSize) / 2);
		color: var(--c_font_light);
		background-color: var(--c_bg_light);
		opacity: 0.6;
	}
}
.tagList {
	display: flex;
	flex-wrap: wrap;
	opacity: 0.85;
	> li {
		&:not(:last-child)::after {
			content: ",";
			margin-right: 0.5em;
		}
	}
}
.WorksOverlay {
	position: fixed;
	top: 0;
	right: 0;
	width: 100vw;
	height: 100vh;
	overflow: hidden;
	overflow-y: scroll;
	z-index: 99;
	// display: flex;
	transition: 0.2s transform, 0.1s opacity;
	background: rgb(#000, 0.5);
	backdrop-filter: blur(3px);
	cursor: pointer;
	animation: opacityIn 0.3s forwards;
	z-index: 999;
	@keyframes opacityIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
	--main_width: 40rem;
	@media (max-width: 800px) {
		--main_width: 100vw;
	}
	.main {
		animation: bottomIn 0.3s forwards;
		pointer-events: none;
		@keyframes bottomIn {
			from {
				opacity: 0;
				transform: translateY(100%);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}
		width: var(--main_width);
		height: fit-content;
		min-height: 100vh;
		display: flex;
		flex-flow: column;
		justify-content: flex-end;
		padding-top: calc($main_marginTop + var(--padding));
		@media (max-width: 800px) {
			padding-top: var(--padding);
			// padding-top: 0;
		}
		position: absolute;
		top: 0;
		right: 2.5vw;

		--padding: min(4vw, 2.5rem);
		@media (max-width: 800px) {
			right: 0;
		}
		z-index: 2;
		> .main_inner {
			cursor: default;
			pointer-events: auto;
			height: fit-content;
			padding: var(--padding);
			padding-top: 0;
			padding-bottom: calc(var(--padding) * 0.9);
			@media (max-width: 800px) {
				padding-bottom: calc(var(--padding) - 1.3rem + $main_marginTop);
			}
			position: relative;
			--gap: 1rem;
			&::after {
				box-shadow: var(--shadow_menu), var(--shadow_menuSub);
				content: "";
				background: var(--c_bg_body);
				width: 100%;
				--gapTop: min(10rem, 40%);
				height: calc(100% - var(--gapTop));
				border-radius: 3rem 3rem 0 0;
				position: absolute;
				top: var(--gapTop);
				right: 0;
				z-index: -1;
			}
			.tmb {
				box-shadow: var(--shadow_menu), var(--shadow_menuSub);
				position: relative;
				max-width: 100%;
				max-height: 60vh;
				aspect-ratio: var(--aspect) / 1;
				margin: auto;
				cursor: zoom-in;
				> span {
					display: block !important;
				}
				&.youtube {
					cursor: pointer;
					&::before {
						content: url("/youtube-dark.svg");
						width: 16%;
						position: absolute;
						top: 50%;
						left: 50%;
						transform: translate(-50%, -50%);
						z-index: 1;
						transition: opacity 0.1s;
					}
					@include hover {
						&::before {
							opacity: 0.8;
						}
					}
				}
				> .youtube {
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					z-index: 2;
					display: none;
					&.play {
						display: block;
					}
				}
				> .categoryList {
					--fontSize: 0.9rem;
					font-size: var(--fontSize);
				}
				& + * {
					margin-top: calc(var(--gap) * 1.5);
				}
			}
			.title {
				font-size: 1.5rem;
				font-weight: bold;
				// hover
				display: inline-block;
				position: relative;
			}
			.meta {
				opacity: 0.3;
				.tagList {
					opacity: 1;
				}
			}
			article {
				// letter-spacing: 0.07em;
				margin-top: var(--gap);
				p {
					margin-top: 1em;
					strong {
						font-weight: bold;
					}
				}
				a {
					color: var(--gradient_1);
					text-shadow: 0 0 0.05em rgba(var(--c_bg_body_reversal_rgb), 0.7),
						0 0 0.2em rgba(var(--c_bg_body_reversal_rgb), 0.2);
					@include hover {
						opacity: 0.7;
					}
				}
				hr {
					width: 30%;
					height: 0.2rem;
					// background: rgba(var(--c_bg_reversal_rgb), 0.03);
					border-radius: 99rem;
					margin: 1em auto;
				}
				h2 {
					font-weight: bold;
					&:not(:first-child, hr + h2) {
						margin-top: 1.5rem;
					}
					display: flex;
					align-items: center;
					&::after {
						flex: 1;
						content: "";
						width: 100%;
						height: 0.1rem;
						background: rgba(var(--c_bg_reversal_rgb), 0.06);
						border-radius: 99rem;
						display: block;
						margin-left: 1em;
					}
				}
				h3 {
					font-weight: bold;
					margin-top: 1.2rem;
				}
				iframe {
					width: 80%;
					aspect-ratio: 16/9;
					margin: 1rem auto;
					display: block;
				}
			}
		}
	}
	.relatedScrollBox {
		position: fixed;
		bottom: 0;
		left: 0;
		width: 100vw;
		overflow: hidden;
		overflow-x: scroll;
		z-index: 1;
		padding: 3vw;
		// box-sizing: content-box;
		> ul {
			--hight: 25vh;
			height: var(--hight);
			width: fit-content;
			display: flex;
			gap: 1rem;
			margin-right: calc(var(--main_width) + 1rem);
		}
		.tmb {
			height: 100%;
			width: calc(var(--hight) * var(--aspect));
		}
	}
}
